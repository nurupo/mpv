#!/usr/bin/python3

# MIT License
#
# Copyright (c) 2020 Maxim Biro <nurupo.contributions@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Just a quick and dirty script that parses history.log generated by the
# event-on-file-loaded-unloaded-keep-history.lua script, figures out which
# videos should still be open in mpv and prints commands on how to start them.
# Useful if you have a backlog of e.g. youtube videos open in mpv instances but
# you have to reboot your system and want to restore them after the reboot.

videos = {}
videos_count = 0

with open('history.log', 'r') as f:
  for line in f:
    columns = line.split()
    status = columns[2]
    path = columns[3]
    if status == 'loaded':
      videos_count += 1
      if path in videos:
        video = videos[path]
        videos[path] = (video[0]+1, video[1], video[2])
      else:
        date  = line[:(line.find(status))].lstrip().rstrip()
        title = line[(line.find(path)+len(path)):].lstrip().rstrip('\n')
        videos[path] = (1, date, title)
    elif status == 'unloaded':
      if path not in videos:
        print('Error: video \'{}\' was unloaded without being loaded first'.format(path))
        continue
      videos_count -= 1
      video = videos[path]
      if video[0] == 1:
        del videos[path]
      else:
        videos[path] = (video[0]-1, video[1], video[2])

print('{} still loaded videos:'.format(videos_count))
for path, (count, date, title) in videos.items():
  for _ in range(count):
    print('# {} {}'.format(date, title))
    print('mpv --script-opts=event-on-file-loaded-resume-startPaused=yes {} &'.format(path))
